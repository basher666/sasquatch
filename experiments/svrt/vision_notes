X - can handle this
N - too many shapes (2, 1/2)
D - disjunction (0, 1/2)
S - scale (1, 3/2)
R - rotation (0, 1/2)
T - topology (4, 0/2)
E - reflection over x-axis (0, 1/2)
F - flipping of shapes (0, 1/2)
Z - qualitative size information

1: X
two shapes that are either the same or different

2: X
two shapes either in the same location or slightly different locations

3: T
four shapes either in two islands of two or one island of one and one Island of three

4: T
two shapes either separate or one inside the other

5: X
four shapes either all different or 2 same / 2 same

6: X
four shapes of two different kinds, either random locations or same kind separated by same distance

7: N
six shapes either two kinds or three kinds

8: D S
two shapes [class 0: nonoverlapping, same kind different scales \/ overlapping, different]
[class 1: overlapping, same]

9: X
three shapes on a line, with either the big one in the middle or at the end

10: X
four shapes other ranged in a square or randomly

11: T
two shapes either in contact or not in contact

12: Z
three shapes; one is equidistant from the other two. [class 0: equidistant shape is large] [class 1: equidistant shape is small]

13: X
four shapes, 2/2 big/small. tell whether the two pairs of big and small have the same relative position

14: X
three shapes either arranged in a line or randomly

15: X
four shapes arranged in a square; either they're all the same shape or different shapes

16: N
six shapes. each coordinate reflected over the x-axis. either the shapes themselves are also reflected were they aren't. we can get this one for a stupid reason, eg, we will classify correctly but we will learn the wrong rule.

17: ?
four shapes; one is of a different kind. either all the locations are random, or the different shape is at the center of the parallelogram that would've been formed by flipping over the triangle formed by the other three shapes.

18: N E
six shapes. in one class the image is flipped over the X axis. in another class every pair of shapes shared the same y-coordinate but aren't necessarily flipped. eg, in one class, shapes come in pairs (x,y),(-x,y) and another class they come in pairs (x,y),(x',y)

19: S
two shapes; either totally different or one is just a rescaled version of the other

20: F S
two shapes; either totally different or one is the reflection of the other over the line that connects them

21: R S
two shapes; either totally different or one is both a rotation and a rescaling of the other

22: X
three shapes in a line; either all the same shape are all different shapes

23: T
three shapes; one is big the others small. [class 0: one inside, one outside] [class 1: either both inside or both outside]



ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 1 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 2 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 3 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 4  3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
python collect_vision_task.py 5 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
python collect_vision_task.py 6 3 10
[1, 1, 1, 0, 1, 0, 0.5, 0.5, 0.5, 0.5, 1, 0, 0.5, 0.5, 0.5, 0.5, 1, 0, 0.5, 0.5]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 7 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
python collect_vision_task.py 8 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 9 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
python collect_vision_task.py 10 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 11 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 12 3 10
[0.5, 1, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5, 0.5, 1, 1, 0, 0, 0, 1, 0, 0, 0.5, 0.5]
python collect_vision_task.py 13 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
python collect_vision_task.py 14 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 15 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 16 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 0, 0, 1, 0, 1, 0, 1, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 0, 1, 0.5, 0.5]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 18 3 10
[1, 1, 1, 1, 1, 0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 19 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 20 3 10
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
python collect_vision_task.py 21 3 10
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
python collect_vision_task.py 22 3 10
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
ellisk@sketch2:~/sasquatch$ python collect_vision_task.py 23 3 10
[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]